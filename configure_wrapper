#!/usr/bin/env python
'''
 This script calls "configure" with the right arguments, which will be 
 chosen depending on the special-arguments passed to this script.
 
 Special arguments for this script:

 Compilers: gcc,mpi,pgi (mutually exclusive)
 Options for pgi: cc35, cc60, haswell, amd (mutually exclusive)
 Options for pgi and cc*: cuda7.0, cuda7.5, cuda8.0 (mutually exclusive)

 Other arguments will be passed directly to "configure" (e.g. --prefix).
 If --prefix is not specified, it is set to $(pwd).


'''
from sys import argv,exit,stderr,stdout
from os import path
import subprocess


basedir = path.dirname(argv[0])

foundPrefix = False
for arg in argv[1:]:
    if '--prefix' in arg:
        foundPrefix = True




accepted_options = ['gcc','mpi','pgi','cc35','cc60','haswell',\
        'amd','cuda7.0','cuda7.5','cuda8.0']

n=None
# flag compatibilities
comp_matrix=[
        [n,0,0,0,0,0,0,0,0,0],# gcc
        [n,n,0,0,0,0,0,0,0,0],# mpi
        [n,n,n,1,1,1,1,1,1,1],# pgi
        [n,n,n,n,0,0,0,1,1,1],# cc35
        [n,n,n,n,n,0,0,1,1,1],# cc60
        [n,n,n,n,n,n,0,0,0,0],# haswell
        [n,n,n,n,n,n,n,0,0,0],# amd
        [n,n,n,n,n,n,n,n,0,0],# cuda7.0
        [n,n,n,n,n,n,n,n,n,0],# cuda7.5
        [n,n,n,n,n,n,n,n,n,n]]# cuda8.0


all_ok = True

# check for option incompatiblity
for i,op in enumerate(accepted_options):
    if op in argv:
        for j,op2 in enumerate(accepted_options):
            if j > i and op2 in argv and comp_matrix[i][j] == 0:
                stderr.write("ERROR: options {} and {} not compatible.\n".
                        format(op,op2))
                all_ok = False

if not all_ok :
    exit(1)


if 'pgi' in argv:
    argv.remove('pgi')

    CC='pgcc'
    CXX='pgc++'

    if 'cc35' in argv:
        argv.remove('cc35')
        ta = 'tesla:cc35'
    elif 'cc60' in argv:
        argv.remove('cc60')
        ta = 'tesla:cc60'
    elif 'haswell' in argv:
        argv.remove('haswell')
        ta = 'multicore'
    elif 'amd' in argv:
        argv.remove('amd')
        ta = 'radeon:hawaii'
    else:
        stderr.write("No architecture selected.\n")
        ta = None


    if 'cuda7.0' in argv:
        argv.remove('cuda7.0')
        ta += ',cuda7.0'
    elif 'cuda7.5' in argv:
        argv.remove('cuda7.5')
        ta += ',cuda7.5'
    elif 'cuda8.0' in argv:
        argv.remove('cuda8.0')
        ta += ',cuda8.0'

    if ta is not None:
        CC_FLAGS='"-acc=noautopar -v -O3 -Minfo=all -ta='+ta+' -DUSE_MPI_CUDA_AWARE -I${MPIINC}"'
        LINKER_FLAGS='"-acc=noautopar -v -O3 -Minfo=all -ta='+ta+' -lmpi -L${MPILIB}"'
    else:
        stderr.write("Compiling with -O0 flags...")
        CC_FLAGS='"-O0"'
        LINKER_FLAGS='"-O0 -lmpi"'


elif 'gcc' in argv:
    argv.remove('gcc')
    CC='gcc'
    CXX='g++'
    CC_FLAGS='"-O3 -std=gnu99"'
    LINKER_FLAGS='"-lm"'


elif 'mpi' in argv:
    argv.remove('mpi')
    CC='mpicc'
    CC_FLAGS='"-O3 -std=gnu99"'
    LINKER_FLAGS='"-lm"'

else : 
    stderr.write("Compiler not specified\n")
    exit(1)


executable = ("%s/configure" % (basedir))

argCC =( "CC=%s"%(CC))
argCFLAGS = ("CFLAGS=%s"%(CC_FLAGS))
argLDFLAGS = ("LDFLAGS=%s"%(LINKER_FLAGS))
argCXX = ("CXX=%s"%(CXX))
argCPPFLAGS = ('CPPFLAGS="-O3"')


argsother = ' '.join(argv[1:])

command = ' '.join([executable,argCC,argCFLAGS,argLDFLAGS,argCXX,argCPPFLAGS,argsother])


if not foundPrefix: 
    command += ' --prefix=$(pwd)'

stderr.write(command+'\n')
ans = raw_input("Execute command? ")

if ans.lower() in ['yes','y','ye']: 
    try:
        subprocess.check_call([command],shell = True)
    except subprocess.CalledProcessError as e:
        stderr.write("Call to {} failed with error {}.\n"
                .format(executable,e.returncode))
        if e.returncode == 77:
            stderr.write("Maybe you need to load the correct modules?\n")
