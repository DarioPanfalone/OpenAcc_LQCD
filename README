
 __     __      _      ____   _____ _____ 
 \ \   / //\   | |    / __ \ / ____/ ____|
  \ \_/ //  \  | |   | |  | | (___| (___  
   \   // /\ \ | |   | |  | |\___ \\___ \ 
    | |/ ____ \| |___| |__| |____) |___) |
    |_/_/    \_\______\___\_\_____/_____/ 
                                          
                                          
 Yet Another Lattice Qcd Simulation Suite
               (With OpenAcc)


1. Build - General ideas

At build time the geometry of the lattice must be known, and must be passed to 
the "configure" script (notice that there is also a "configure_wrapper" script, 
which is a python script, which makes easier to call "configure": more on that is written
below). At present, "configure" reads a file named "geom_defines.txt" 
which contains the lattice dimensions and the dimensions of the OpenAcc tiles.
A commented example of the file can be found in the 'doc' directory.

In case the system you are working on uses environment modules, you need to load them before 
invoking "configure".

Example:

mkdir build
cd build

<add the geom_defines.txt file>

../configure_wrapper pgi cc35 cuda8.0

make && make install  # you may want to use make -j32 to be faster.



1.1 Usage of the plain "configure" script

You must also pass to configure:
- The compiler : CC=<the compiler you want to use>
- prefix : The place where you want the code to be installed. Note that it defaults to 
  a system directory you're likely not to have access to, but even if you have access to it 
  you should not install this software in system directories.
- CFLAGS : compiler flags. Will be discussed later, depends on the compiler used.
- LDFLAGS : the linker flags

1.1 The "configure_wrapper" script

This simple wrapper allows the user to call call configure without remembering all the
options. If you don't trust this wrapper, you can look into the code and look at the 
options you need.
It is called in this way:

../configure_wrapper pgi cc35 cuda8.0

It will produce the command

./configure CC=pgcc CFLAGS="-acc=noautopar -v -O3 -Minfo=all -ta=tesla:cc35,cuda8.0 -DUSE_MPI_CUDA_AWARE -I${MPIINC}" LDFLAGS="-acc=noautopar -v -O3 -Minfo=all -ta=tesla:cc35,cuda8.0 -lmpi -L${MPILIB}"  --prefix=$(pwd)

and you will be asked if you want to execute it or not. Note that, for simplicity, 
the install directory (--prefix) is set to the working directory (the programs will be
installed in $PWD/bin).  If you want to change that, just specify 
--prefix=<your explicit installing directory>


2. Benchmarks

In order to run all the necessary benchmarks, it is advised to create an aptly named directory.
In such directory, create a "geom_defines.txt" file



3. Test

WORK IN PROGRESS


