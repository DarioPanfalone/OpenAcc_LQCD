// SINGLE PRECISION KERNELS FOR ODD/EVEN FERMIONS

// ASSUMIAMO CHE IL KERNEL CONOSCA LA CARICA CHARGE DELLO PSEUDO-FERMIONE CHE C'E' NELLA TEXTURE CHE STIAMO USANDO

__global__ void DslashKernelEO(float2  *out,
                               int *tables, 
                               int *phases, 
                               size_t gauge_offset,
                               size_t ferm_offset,
                               size_t magn_offset,
                               int ps_ferm)
  {
  int idx = blockIdx.x * blockDim.x + threadIdx.x + size_dev_h;  // idx>sizeh, ODD
  int stag_phase = 1;

  //Store result in sharedMem
  __shared__ float ferm_out[3][2][NUM_THREADS];

  //New tables indexing (index fastest)
  __shared__ int site_table[NUM_THREADS];

  //Load link matrix U_mu(ix) in registers
  DeclareMatrixRegs;      //12 registers

  float2 ferm_in_0, ferm_in_1, ferm_in_2;

  #ifdef MAGN
  float magn_angle;
  float cos_magn;
  float sin_magn;
  #endif

  #if defined(IM_CHEM_POT) || defined(MAGN)
   float2 ferm_aux_0, ferm_aux_1, ferm_aux_2;
  #endif

  // Direction 0
  site_table[threadIdx.x]  = tables[idx+4*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);
 
  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 0);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, idx + magn_offset); // -> dir 0
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);       //-------------> fare in modo che la carica dello pseudo fermione sia quella giusta!!!!!!
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);         //-----> idem
//  sincosf(device_charges_f[ps_ferm] * magn_angle,&sin_magn,&cos_magn);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

#ifndef MAGN

  ferm_out[0][0][threadIdx.x] = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] = C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
                                C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
                                C3RE*ferm_in_2.x-C3IM*ferm_in_2.y; 
  ferm_out[2][1][threadIdx.x] = C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
                                C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
                                C3RE*ferm_in_2.y+C3IM*ferm_in_2.x; 

#else

  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
	         C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
	         C3RE*ferm_in_2.x-C3IM*ferm_in_2.y;
  ferm_aux_2.y = C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
	         C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
	         C3RE*ferm_in_2.y+C3IM*ferm_in_2.x;

  ferm_out[0][0][threadIdx.x] = ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] = ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] = ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] = ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] = ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] = ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif


  //Direction 1
  site_table[threadIdx.x] = tables[idx+5*size_dev];
  stag_phase              = phases[idx+size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 1);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ size_dev + magn_offset); // -> dir 1
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
#else

  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
                             C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
                             C3RE*ferm_in_2.x-C3IM*ferm_in_2.y);
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
                             C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
                             C3RE*ferm_in_2.y+C3IM*ferm_in_2.x);

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif

  //Direction 2
  site_table[threadIdx.x] = tables[idx+6*size_dev];
  stag_phase              = phases[idx+2*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ 2*size_dev + magn_offset); // -> dir 2
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 2);

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 

#else
  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
                             C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
                             C3RE*ferm_in_2.x-C3IM*ferm_in_2.y);
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
                             C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
                             C3RE*ferm_in_2.y+C3IM*ferm_in_2.x);

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif

  //Direction 3
  site_table[threadIdx.x]  = tables[idx+7*size_dev];
  stag_phase               = phases[idx+3*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ 3*size_dev + magn_offset); // -> dir 3
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 3);

#ifndef MAGN
  #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
  #else
  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
	         C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
	         C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
	         C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
	         C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*dev_eim_cos_f - ferm_aux_0.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*dev_eim_sin_f + ferm_aux_0.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*dev_eim_cos_f - ferm_aux_1.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*dev_eim_sin_f + ferm_aux_1.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*dev_eim_cos_f - ferm_aux_2.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*dev_eim_sin_f + ferm_aux_2.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_2]
  #endif

#else
  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
	         C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
	         C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
	         C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
	         C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
  
 #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]
 
 #else
  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*dev_eim_cos_f*cos_magn - ferm_aux_0.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*dev_eim_sin_f*sin_magn + ferm_aux_0.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*dev_eim_cos_f*cos_magn - ferm_aux_1.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*dev_eim_sin_f*sin_magn + ferm_aux_1.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*dev_eim_cos_f*cos_magn - ferm_aux_2.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*dev_eim_sin_f*sin_magn + ferm_aux_2.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_2]
  #endif

#endif
  
  //---------------------------------------------------end of first block
 
  //Direction 0
  site_table[threadIdx.x] = tables[idx];
 
  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 0);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + magn_offset); // -> dir 0
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

#ifndef MAGN

  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
              			 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
				 C1RE*ferm_in_2.x   +C1IM*ferm_in_2.y; 
  
  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 C1RE*ferm_in_2.y   -C1IM*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 C2RE*ferm_in_2.x   +C2IM*ferm_in_2.y; 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 C2RE*ferm_in_2.y   -C2IM*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 C3RE*ferm_in_2.x   +C3IM*ferm_in_2.y; 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 C3RE*ferm_in_2.y   -C3IM*ferm_in_2.x; 

#else
  
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 C1RE*ferm_in_2.x   +C1IM*ferm_in_2.y; 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 C1RE*ferm_in_2.y   -C1IM*ferm_in_2.x; 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 C2RE*ferm_in_2.x   +C2IM*ferm_in_2.y; 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 C2RE*ferm_in_2.y   -C2IM*ferm_in_2.x; 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 C3RE*ferm_in_2.x   +C3IM*ferm_in_2.y; 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 C3RE*ferm_in_2.y   -C3IM*ferm_in_2.x; 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]

#endif

  //Direction 1
  site_table[threadIdx.x] = tables[idx+size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 1);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + size_dev + magn_offset); // -> dir 1
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif


#ifndef MAGN


  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y-C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y-C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

#else
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]
#endif

  //Direction 2
  site_table[threadIdx.x] = tables[idx+2*size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+2*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + 2*size_dev + magn_offset); // -> dir 2
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif
 
  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 2);

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+ C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

#else
 ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]
#endif

  //Direction 3
  site_table[threadIdx.x] = tables[idx+3*size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+3*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + 3*size_dev + magn_offset); // -> dir 3
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 3);

#ifndef MAGN
  #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
  #else
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*dev_eim_cos_f + ferm_aux_0.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*dev_eim_sin_f + ferm_aux_0.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*dev_eim_cos_f + ferm_aux_1.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*dev_eim_sin_f + ferm_aux_1.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*dev_eim_cos_f + ferm_aux_2.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*dev_eim_sin_f + ferm_aux_2.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_2]
  #endif

#else
 ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
  
 #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]
 
 #else 
  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*dev_eim_cos_f*cos_mag + ferm_aux_0.y*dev_eim_sin_f*sin_magn;   // Re[e^{-imu}*e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*dev_eim_sin_f*sin_magn + ferm_aux_0.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*dev_eim_cos_f*cos_magn + ferm_aux_1.y*dev_eim_sin_f*sin_magn;  // Re[e^{-imu}*e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*dev_eim_sin_f*sin_magn + ferm_aux_1.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*dev_eim_cos_f*cos_magn + ferm_aux_2.y*dev_eim_sin_f*sin_magn;  // Re[e^{-imu}*e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*dev_eim_sin_f*sin_magn + ferm_aux_2.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_2]
 #endif
#endif
  //-------------------------------------------------end of second block
 
  //even  
  ferm_in_0 = tex1Dfetch(fermion_texRef,              idx + ferm_offset - size_dev_h);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + idx + ferm_offset - size_dev_h);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + idx + ferm_offset - size_dev_h);

  out[idx              - size_dev_h ].x = mass_dev*ferm_in_0.x;
  out[idx              - size_dev_h ].y = mass_dev*ferm_in_0.y;
  out[idx +   size_dev - size_dev_h ].x = mass_dev*ferm_in_1.x;
  out[idx +   size_dev - size_dev_h ].y = mass_dev*ferm_in_1.y;
  out[idx + 2*size_dev - size_dev_h ].x = mass_dev*ferm_in_2.x;
  out[idx + 2*size_dev - size_dev_h ].y = mass_dev*ferm_in_2.y;

  //odd
  out[idx               ].x = ferm_out[0][0][threadIdx.x]*(0.5f);
  out[idx               ].y = ferm_out[0][1][threadIdx.x]*(0.5f);
  out[idx +   size_dev  ].x = ferm_out[1][0][threadIdx.x]*(0.5f);
  out[idx +   size_dev  ].y = ferm_out[1][1][threadIdx.x]*(0.5f);
  out[idx + 2*size_dev  ].x = ferm_out[2][0][threadIdx.x]*(0.5f);
  out[idx + 2*size_dev  ].y = ferm_out[2][1][threadIdx.x]*(0.5f);
 
  //-------------------------------------------------end of Dslash
  }



__global__ void DslashDaggerKernelEO(float2 *out,
                                     int *tables, 
                                     int *phases,
                                     size_t gauge_offset,
                                     size_t ferm_offset,
                                     size_t magn_offset,
                                     int ps_ferm)
  { 
  int idx = blockIdx.x*blockDim.x + threadIdx.x;     // idx< sizeh, EVEN!!
  int stag_phase = 1;

  //Store result in sharedMem
  __shared__ float ferm_out[3][2][NUM_THREADS];

  //New tables indexing (index fastest)
  __shared__ int site_table[NUM_THREADS];

  //Load link matrix U_mu(ix) in registers
  DeclareMatrixRegs;           //12 registers

  float2 ferm_in_0, ferm_in_1, ferm_in_2;

  #ifdef MAGN
  float magn_angle;
  float cos_magn;
  float sin_magn;
  #endif

  #if defined(IM_CHEM_POT) || defined(MAGN)
   float2 ferm_aux_0, ferm_aux_1, ferm_aux_2;
  #endif

  
  // Direction 0
  site_table[threadIdx.x] = tables[idx+4*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);
 
  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 0);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, idx + magn_offset); // -> dir 0
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);       //-------------> fare in modo che la carica dello pseudo fermione sia quella giusta!!!!!!
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);         //-----> idem
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] = C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
                                C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
                                C3RE*ferm_in_2.x-C3IM*ferm_in_2.y; 
  ferm_out[2][1][threadIdx.x] = C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
                                C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
                                C3RE*ferm_in_2.y+C3IM*ferm_in_2.x; 

#else

  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
	         C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
	         C3RE*ferm_in_2.x-C3IM*ferm_in_2.y;
  ferm_aux_2.y = C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
	         C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
	         C3RE*ferm_in_2.y+C3IM*ferm_in_2.x;

  ferm_out[0][0][threadIdx.x] = ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] = ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] = ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] = ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] = ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] = ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif


  //Direction 1
  site_table[threadIdx.x] = tables[idx+5*size_dev];
  stag_phase              = phases[idx+size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 1);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ size_dev + magn_offset); // -> dir 1
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
#else

  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
                             C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
                             C3RE*ferm_in_2.x-C3IM*ferm_in_2.y);
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
                             C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
                             C3RE*ferm_in_2.y+C3IM*ferm_in_2.x);

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif

   
  //Direction 2
  site_table[threadIdx.x] = tables[idx+6*size_dev];
  stag_phase              = phases[idx+2*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ 2*size_dev + magn_offset); // -> dir 2
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 2);

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 

#else
 ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y;
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x;

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y;
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x;

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+
                             C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+
                             C3RE*ferm_in_2.x-C3IM*ferm_in_2.y);
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+
                             C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+
                             C3RE*ferm_in_2.y+C3IM*ferm_in_2.x);

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]

#endif
  
  //Direction 3
  site_table[threadIdx.x] = tables[idx+7*size_dev];
  stag_phase              = phases[idx+3*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef,idx+ 3*size_dev + magn_offset); // -> dir 3
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
#endif

  LoadLinkRegs(gauge_texRef, size_dev, idx + gauge_offset, 3);

#ifndef MAGN
  #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] += link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_out[0][1][threadIdx.x] += link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] += link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_out[1][1][threadIdx.x] += link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
					     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
					     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_out[2][1][threadIdx.x] += stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
					     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
					     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
  #else
  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
	                     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
			     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
			     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
			     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*dev_eim_cos_f - ferm_aux_0.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*dev_eim_sin_f + ferm_aux_0.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*dev_eim_cos_f - ferm_aux_1.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*dev_eim_sin_f + ferm_aux_1.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*dev_eim_cos_f - ferm_aux_2.y*dev_eim_sin_f;  // Re[e^{imu}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*dev_eim_sin_f + ferm_aux_2.y*dev_eim_cos_f;  // Im[e^{imu}*ferm_aux_2]
  #endif

#else
  ferm_aux_0.x = link0.x*ferm_in_0.x-link0.y*ferm_in_0.y+  
                 link0.z*ferm_in_1.x-link0.w*ferm_in_1.y+ 
                 link1.x*ferm_in_2.x-link1.y*ferm_in_2.y; 
  ferm_aux_0.y = link0.x*ferm_in_0.y+link0.y*ferm_in_0.x+ 
                 link0.z*ferm_in_1.y+link0.w*ferm_in_1.x+ 
                 link1.x*ferm_in_2.y+link1.y*ferm_in_2.x; 

  ferm_aux_1.x = link1.z*ferm_in_0.x-link1.w*ferm_in_0.y+  
                 link2.x*ferm_in_1.x-link2.y*ferm_in_1.y+ 
                 link2.z*ferm_in_2.x-link2.w*ferm_in_2.y; 
  ferm_aux_1.y = link1.z*ferm_in_0.y+link1.w*ferm_in_0.x+ 
                 link2.x*ferm_in_1.y+link2.y*ferm_in_1.x+ 
                 link2.z*ferm_in_2.y+link2.w*ferm_in_2.x; 

  ferm_aux_2.x = stag_phase*(C1RE*ferm_in_0.x-C1IM*ferm_in_0.y+  
	                     C2RE*ferm_in_1.x-C2IM*ferm_in_1.y+ 
			     C3RE*ferm_in_2.x-C3IM*ferm_in_2.y); 
  ferm_aux_2.y = stag_phase*(C1RE*ferm_in_0.y+C1IM*ferm_in_0.x+ 
			     C2RE*ferm_in_1.y+C2IM*ferm_in_1.x+ 
			     C3RE*ferm_in_2.y+C3IM*ferm_in_2.x); 
 #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*cos_magn - ferm_aux_0.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*cos_magn - ferm_aux_1.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*cos_magn - ferm_aux_2.y*sin_magn;  // Re[e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{i charge field}*ferm_aux_2]
 #else
  ferm_out[0][0][threadIdx.x] += ferm_aux_0.x*dev_eim_cos_f*cos_magn - ferm_aux_0.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] += ferm_aux_0.x*dev_eim_sin_f*sin_magn + ferm_aux_0.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] += ferm_aux_1.x*dev_eim_cos_f*cos_magn - ferm_aux_1.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] += ferm_aux_1.x*dev_eim_sin_f*sin_magn + ferm_aux_1.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] += ferm_aux_2.x*dev_eim_cos_f*cos_magn - ferm_aux_2.y*dev_eim_sin_f*sin_magn;  // Re[e^{imu}*e^{i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] += ferm_aux_2.x*dev_eim_sin_f*sin_magn + ferm_aux_2.y*dev_eim_cos_f*cos_magn;  // Im[e^{imu}*e^{i charge field}*ferm_aux_2]
  #endif
#endif

  
  //---------------------------------------------------end of first block
 
  //Direction 0
  site_table[threadIdx.x] = tables[idx];
 
  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs( gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 0);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + magn_offset); // -> dir 0
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
              			 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
				 C1RE*ferm_in_2.x   +C1IM*ferm_in_2.y; 
  
  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 C1RE*ferm_in_2.y   -C1IM*ferm_in_2.x; 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +        
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 C2RE*ferm_in_2.x   +C2IM*ferm_in_2.y; 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 C2RE*ferm_in_2.y   -C2IM*ferm_in_2.x; 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 C3RE*ferm_in_2.x   +C3IM*ferm_in_2.y; 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 C3RE*ferm_in_2.y   -C3IM*ferm_in_2.x; 

#else
  
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 C1RE*ferm_in_2.x   +C1IM*ferm_in_2.y; 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 C1RE*ferm_in_2.y   -C1IM*ferm_in_2.x; 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 C2RE*ferm_in_2.x   +C2IM*ferm_in_2.y; 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 C2RE*ferm_in_2.y   -C2IM*ferm_in_2.x; 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 C3RE*ferm_in_2.x   +C3IM*ferm_in_2.y; 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 C3RE*ferm_in_2.y   -C3IM*ferm_in_2.x; 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]

#endif

  
  //Direction 1
  site_table[threadIdx.x] = tables[idx+size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 1);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + size_dev + magn_offset); // -> dir 1
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y-C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y-C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
#else
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]
#endif

  //Direction 2
  site_table[threadIdx.x] = tables[idx+2*size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+2*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + 2*size_dev + magn_offset); // -> dir 2
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif
 
  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 2);

#ifndef MAGN
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+ C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
#else
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]
#endif

  //Direction 3
  site_table[threadIdx.x] = tables[idx+3*size_dev];
  stag_phase              = phases[site_table[threadIdx.x]+3*size_dev];

  ferm_in_0 = tex1Dfetch(fermion_texRef,              site_table[threadIdx.x] + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + site_table[threadIdx.x] + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + site_table[threadIdx.x] + ferm_offset);

#ifdef MAGN
  magn_angle = tex1Dfetch(magn_texRef, site_table[threadIdx.x] + 3*size_dev + magn_offset); // -> dir 3
  ////////////// !! charge -- deve essere di tipo float !! //////////////////////////////////
  cos_magn = cosf(device_charges_f[ps_ferm] * magn_angle);
  sin_magn = sinf(device_charges_f[ps_ferm] * magn_angle);
  ///////////////////////////////////////////////////////////////////////////////////////////
#endif

  LoadLinkRegs(gauge_texRef, size_dev, site_table[threadIdx.x] + gauge_offset, 3);

#ifndef MAGN
  #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] -= link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_out[0][1][threadIdx.x] -= link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_out[1][0][threadIdx.x] -= link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_out[1][1][threadIdx.x] -= link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_out[2][0][threadIdx.x] -= link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_out[2][1][threadIdx.x] -= link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
  #else
  ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 

  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*dev_eim_cos_f + ferm_aux_0.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*dev_eim_sin_f + ferm_aux_0.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*dev_eim_cos_f + ferm_aux_1.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*dev_eim_sin_f + ferm_aux_1.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*dev_eim_cos_f + ferm_aux_2.y*dev_eim_sin_f;  // Re[e^{-imu}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*dev_eim_sin_f + ferm_aux_2.y*dev_eim_cos_f;  // Im[e^{-imu}*ferm_aux_2]
  #endif

#else
 ferm_aux_0.x = link0.x*ferm_in_0.x+link0.y*ferm_in_0.y +
                 link1.z*ferm_in_1.x+link1.w*ferm_in_1.y +
                 stag_phase*(C1RE*ferm_in_2.x+  C1IM*ferm_in_2.y); 

  ferm_aux_0.y = link0.x*ferm_in_0.y-link0.y*ferm_in_0.x +
                 link1.z*ferm_in_1.y-link1.w*ferm_in_1.x +
                 stag_phase*(C1RE*ferm_in_2.y- C1IM*ferm_in_2.x); 

  ferm_aux_1.x = link0.z*ferm_in_0.x+link0.w*ferm_in_0.y +
                 link2.x*ferm_in_1.x+link2.y*ferm_in_1.y +
                 stag_phase*(C2RE*ferm_in_2.x+ C2IM*ferm_in_2.y); 

  ferm_aux_1.y = link0.z*ferm_in_0.y-link0.w*ferm_in_0.x +
                 link2.x*ferm_in_1.y-link2.y*ferm_in_1.x +
                 stag_phase*(C2RE*ferm_in_2.y- C2IM*ferm_in_2.x); 

  ferm_aux_2.x = link1.x*ferm_in_0.x+link1.y*ferm_in_0.y +
                 link2.z*ferm_in_1.x+link2.w*ferm_in_1.y +
                 stag_phase*(C3RE*ferm_in_2.x+ C3IM*ferm_in_2.y); 

  ferm_aux_2.y = link1.x*ferm_in_0.y-link1.y*ferm_in_0.x +
                 link2.z*ferm_in_1.y-link2.w*ferm_in_1.x +
                 stag_phase*(C3RE*ferm_in_2.y- C3IM*ferm_in_2.x); 
 #ifndef IM_CHEM_POT
  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*cos_magn + ferm_aux_0.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*sin_magn + ferm_aux_0.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*cos_magn + ferm_aux_1.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*sin_magn + ferm_aux_1.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*cos_magn + ferm_aux_2.y*sin_magn;  // Re[e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*sin_magn + ferm_aux_2.y*cos_magn;  // Im[e^{-i charge field}*ferm_aux_2]

 #else
  ferm_out[0][0][threadIdx.x] -=  ferm_aux_0.x*dev_eim_cos_f*cos_magn + ferm_aux_0.y*dev_eim_sin_f*sin_magn;  // Re[e^{-imu}*e^{-i charge field}*ferm_aux_0]
  ferm_out[0][1][threadIdx.x] -= -ferm_aux_0.x*dev_eim_sin_f*sin_magn + ferm_aux_0.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_0]

  ferm_out[1][0][threadIdx.x] -=  ferm_aux_1.x*dev_eim_cos_f*cos_magn + ferm_aux_1.y*dev_eim_sin_f*sin_magn;  // Re[e^{-imu}*e^{-i charge field}*ferm_aux_1]
  ferm_out[1][1][threadIdx.x] -= -ferm_aux_1.x*dev_eim_sin_f*sin_magn + ferm_aux_1.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_1]

  ferm_out[2][0][threadIdx.x] -=  ferm_aux_2.x*dev_eim_cos_f*cos_magn + ferm_aux_2.y*dev_eim_sin_f*sin_magn;  // Re[e^{-imu}*e^{-i charge field}*ferm_aux_2]
  ferm_out[2][1][threadIdx.x] -= -ferm_aux_2.x*dev_eim_sin_f*sin_magn + ferm_aux_2.y*dev_eim_cos_f*cos_magn;  // Im[e^{-imu}*e^{-i charge field}*ferm_aux_2]
 #endif

#endif

  //-------------------------------------------------end of second block

  // even   
  ferm_in_0 = tex1Dfetch(fermion_texRef,              idx + ferm_offset);
  ferm_in_1 = tex1Dfetch(fermion_texRef,   size_dev + idx + ferm_offset);
  ferm_in_2 = tex1Dfetch(fermion_texRef, 2*size_dev + idx + ferm_offset);

  out[idx               ].x = mass_dev*ferm_in_0.x + ferm_out[0][0][threadIdx.x]*(-0.5f);
  out[idx               ].y = mass_dev*ferm_in_0.y + ferm_out[0][1][threadIdx.x]*(-0.5f);
  out[idx +   size_dev  ].x = mass_dev*ferm_in_1.x + ferm_out[1][0][threadIdx.x]*(-0.5f);
  out[idx +   size_dev  ].y = mass_dev*ferm_in_1.y + ferm_out[1][1][threadIdx.x]*(-0.5f);
  out[idx + 2*size_dev  ].x = mass_dev*ferm_in_2.x + ferm_out[2][0][threadIdx.x]*(-0.5f);
  out[idx + 2*size_dev  ].y = mass_dev*ferm_in_2.y + ferm_out[2][1][threadIdx.x]*(-0.5f);

  // odd
  out[idx              + size_dev_h ].x = 0.0f;
  out[idx              + size_dev_h ].y = 0.0f;
  out[idx +   size_dev + size_dev_h ].x = 0.0f;
  out[idx +   size_dev + size_dev_h ].y = 0.0f;
  out[idx + 2*size_dev + size_dev_h ].x = 0.0f;
  out[idx + 2*size_dev + size_dev_h ].y = 0.0f;

  //-------------------------------------------------end of DslashDagger
  }








///////////////////////////////////////////////////////////////////////////////////////// END OF KERNELS





void DslashOperatorEO(float2 *out, 
		      float2 *in, 
		      const int isign,
                      int pseudoferm)
  {
  #ifdef DEBUG_MODE_2
  printf("\033[32mDEBUG: inside DslashOperatorEO ...\033[0m\n");
  #endif

  dim3 BlockDimension(NUM_THREADS);
  dim3 GridDimension(sizeh/BlockDimension.x); // Only even sites!

  size_t vector_size=3*size*sizeof(float2);
  size_t gauge_field_size = sizeof(float4)*size*12;  

#ifdef MAGN
  size_t magn_size = sizeof(float)*4*size;
#endif

  size_t offset_g, offset_f;
// the magnetic offset has to be defined also if MAGN is not defined because otherwise the kernelprototype is uncomplete
  size_t offset_b;
  cudaSafe(AT,cudaBindTexture(&offset_f, fermion_texRef, in, vector_size), "cudaBindTexture");
  offset_f/=sizeof(float2);

  cudaSafe(AT,cudaBindTexture(&offset_g, gauge_texRef, gauge_field_device, gauge_field_size), "cudaBindTexture");  
  offset_g/=sizeof(float4);

#ifdef MAGN
  cudaSafe(AT,cudaBindTexture(&offset_b, magn_texRef, device_b_phases, magn_size), "cudaBindTexture");  
#endif 
  offset_b/=sizeof(float);

  if(isign == PLUS) 
    {
    DslashKernelEO<<<GridDimension,BlockDimension>>>(out, device_table, device_phases, offset_g, offset_f, offset_b, pseudoferm); 
    cudaCheckError(AT,"DslashKernelEO"); 
    }
  
  if(isign == MINUS) 
    {
    DslashDaggerKernelEO<<<GridDimension,BlockDimension>>>(out, device_table, device_phases, offset_g, offset_f, offset_b, pseudoferm);
    cudaCheckError(AT,"DslashDaggerKernelEO"); 
    }


#ifdef MAGN
  cudaSafe(AT,cudaUnbindTexture(magn_texRef), "cudaUnbindTexture");
#endif
  cudaSafe(AT,cudaUnbindTexture(fermion_texRef), "cudaUnbindTexture");
  cudaSafe(AT,cudaUnbindTexture(gauge_texRef), "cudaUnbindTexture");

  #ifdef DEBUG_MODE_2
  printf("\033[32m\tterminated DslashOperator \033[0m\n");
  #endif
  }
