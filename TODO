
- phases in the multinode setup  (DONE, TO CHECK)
- Kernels that must be restricted to local lattice (conf generation)
  fermionic_utilities (basic linear algebra):
   (NO LINEAR COMBINATIONS)
   real_scal_prod_loc DONE, 1D CUT TOO
   scal_prod_loc DONE, 1D CUT TOO
   l2norm2_loc DONE, 1D CUT TOO
  fermion_matrix
   acc_Deo  
    acc_Deo full (inherits the name) WRITTEN
    acc_Deo_bulk                     WRITTEN
    acc_Deo_d3p                      WRITTEN
    acc_Deo_d3m                      WRITTEN
   acc_Doe                           WRITTEN
    acc_Doe full (inherits the name) WRITTEN
    acc_Doe_bulk                     WRITTEN
    acc_Doe_d3p                      WRITTEN
    acc_Doe_d3m                      WRITTEN
  NOTE: write fermion_matrix_multiplication to make use 
  of async transfers etc.
  
  fermion force utilities:
   direct_product_of_fermions_into_auxmat             DONE  
   multiply_conf_times_force_and_take_ta_even_nophase DELETED
   multiply_conf_times_force_and_take_ta_odd_nophase  DELETED 
   multiply_conf_times_force_and_take_ta_nophase DONE
   multiply_backfield_times_force   DONE
   accumulate_gl3soa_into_gl3soa  DONE
  plaquettes:
   calc_loc_plaquettes_removing_stag_phases_nnptrick
   calc_loc_staples_removing_stag_phases_nnptrick_all 
   calc_loc_staples_removing_stag_phases_nnptrick_all_only_even 
   calc_loc_staples_removing_stag_phases_nnptrick_all_only_odd
  random_assignement:
   generate_vec3_soa_gauss 
   // should include border communication
   generate_Momenta_gauss
   // should include border communication
   generate_Conf_cold
   // should include border communication
   generate_vec3_soa_z2noise
   // should include border communication
  rettangoli:
   calc_loc_rectangles_2x1_removing_stag_phases_nnptrick
   calc_loc_rectangles_1x2_removing_stag_phases_nnptrick
   calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all
   calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all
   calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all
   calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all
  su3_measurements:
   calc_momenta_action
   calc_force_norm
   calc_diff_force_norm
   copy_ipdot_into_old (not necessary for correctness)
  su3_utilities:
   unitarize_conf
   conf_times_staples_ta_part
   RHO_times_conf_times_staples_ta_part
   mom_sum_mult
    mom_sum_mult full (inherits the name )
    mom_sum_mult_bulk
    mom_sum_mult_d3p
    mom_sum_mult_d3m
   mom_exp_times_conf_soloopenacc
    mom_exp_times_conf_soloopenacc full (inherits the name)
    mom_exp_times_conf_soloopenacc_bulk
    mom_exp_times_conf_soloopenacc_d3p
    mom_exp_times_conf_soloopenacc_d3m

- Kernels that must be restricted to local lattice (measurements)
  baryon number utilities:
   dM_dmu_eo(0123)
   dM_dmu_oe(0123)
   d2M_dmu2_eo(0123)
   d2M_dmu2_oe(0123)
  gauge_meas:
   reduce_loc_top_charge
  polyakov:
   polyakov_loop(0123) // REDEFINE structure sizes!!
                       // not trivial

OTHER MODIFICATIONS
  
- NNP and NNM must give errors when they should
  
  FOR MEASURES
  cooling:
   compute_cooled_even_links
   compute_cooled_odd_links
  

  fermion measures: 
   eo_inversion (communicate borders in two places)
   random elements generation should be ok 
    (border communication should already be done by the generating
     functions. )
    


===============================================================
Possible improvements for performance

- To improve strong scaling on multishift: (+30% max scalability )
  - modify matrix multiplication, to have only one communication BUT
    TWICE AS LARGE (and more calculations).
  - kernels working only on the surface:

    |--/////BULK/////--|
   -|---////BULK////---|-
  --|----///BULK///----|--

  The gain would be that this would allow to superpose the bulk
  calculations of ALL the multishift machinery (the linear combinations on
  all the shifted vectors)  with the communications of the halos.
  Especially when the number of terms in the rational approximation is
  high, this is likely to allow better scalability (note that is is
  going to slow down performance a little bit in the case where )

- Single precision molecular dynamics: (+100% flat)
  -known advantages
  -doubling of "soa" data types 
  -brainless rewrite of the gauge part 
  -fermion part semi-brainless
  -need conversion functions

- No multishift (boh)
  -advantages not precisely known 
    (possibility of preconditioning, deflation and such)
  -functions already in place (not for multinode though).
 
