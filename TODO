

Things to do:
1. Compilation with GCC, no multidev: DONE
2. Correct execution with GCC, no multidev
   (check-bugfix)  
     TEST PURE GAUGE (no fermions):    OK (8^4) (accepts)
     TEST WITH FERMIONS              : OK (8^4) (accepts)
3. Compilation with PGI, no multidev ~OK (only pgi15.9)
4. Correct execution with PGI, no multidev
    STATUS : Compiles and ~accepts bu~t it's slow AS HELL (3x )
    - ACC_DEO, ACC_DOE not accelerated correctly. <<<<-------notice

5. Compilation with MPICC, multidev (2 ranks, minilattice) DONE
5.5 Preparation of input file for run                      DONE 
6. Correct execution with MPICC (2 ranks, minilattice) IN PROGRESS
   - checks for segmentation faults and mpi errors: OK
   - check for actual correctness of the code:
     - TEST PURE GAUGE   (no fermions):     OK (8^4 x 2) (accepts)
     - TEST PURE GAUGE on different machines 
           (sbombolator, cudawn7, zassenhaus(using openmpi1.8):  OK)
    - check of nranks read from input file from MPI_Init() WRITTEN
    - DIFFERENT MPI PROCESSES DON'T AGREE ON ACCEPTING (solved)
       MPI_Bcast was called on a double variable with MPI_INT datatype.

     - dynamical fermions: HALF FAIL
         STATUS: multishift inverter takes too long to converge. Can't be right.
            CHECK!!
          + read/communicate pieces of/write global fermions 
               WRITTEN, TO CHECK (seems to work reasonably)
         TEST dirac operator: OK (4^4x2)
           some #defines were wrong, MULTIDEV instead of MULTIDEVICE
           moreover the initialization of u1 phases was incorrect,
           not taking correctly into account the antiperiodicity when
           considering the negative halo of the first rank.
         TEST no stouting: Accept, but with suspicions (4^4x2) (CHECK)
           - test no stouging multi device - seems to accept, 
             but there can be mistakes - In particular, the action difference
             seems to tend to zero perhaps very slowly or perhaps even 
             not at all. Maybe it's just that, without stouting, the situation 
             is generally worse?
         TEST inverter TO CHECK (see below)
         TEST multishift inverter: OK, probably
           - acceptance in metropolis test suggests that it's ok.
         STOUTING: FAIL, 
           - Error: some non local routines in the fermion force calculation 
             (compute sigma from sigma primo, as an example) are treated as local,
             and this is a mistake. Correcting this mistake does not seem to 
             fix everything though.

     - calculation of gauge observables on a given conf: TO CHECK
   

NO ASYNC WORK DONE YET


----------------------------------------------------------------
- phases in the multinode setup  (DONE, TO CHECK)
- Kernels that must be restricted to local lattice (conf generation)
  fermionic_utilities (basic linear algebra):
   (NO LINEAR COMBINATIONS)
   real_scal_prod_loc DONE, 1D CUT TOO
   scal_prod_loc DONE, 1D CUT TOO
   l2norm2_loc DONE, 1D CUT TOO
  fermion_matrix
   acc_Deo  
    acc_Deo full (inherits the name) WRITTEN
    acc_Deo_bulk                     WRITTEN
    acc_Deo_d3p                      WRITTEN
    acc_Deo_d3m                      WRITTEN
   acc_Doe                           WRITTEN
    acc_Doe full (inherits the name) WRITTEN
    acc_Doe_bulk                     WRITTEN
    acc_Doe_d3p                      WRITTEN
    acc_Doe_d3m                      WRITTEN
  NOTE: write fermion_matrix_multiplication to make use 
  of async transfers etc.
  
  fermion force utilities:
   direct_product_of_fermions_into_auxmat             DONE  
   multiply_conf_times_force_and_take_ta_even_nophase DELETED
   multiply_conf_times_force_and_take_ta_odd_nophase  DELETED 
   multiply_conf_times_force_and_take_ta_nophase DONE
   multiply_backfield_times_force   DONE
   accumulate_gl3soa_into_gl3soa  DONE
  plaquettes:
   calc_loc_plaquettes_removing_stag_phases_nnptrick  1DCUTWARNING - DONE
   calc_loc_staples_removing_stag_phases_nnptrick_all:
    calc_loc_staples_removing_stag_phases_nnptrick_all (full) DONE 
    calc_loc_staples_removing_stag_phases_nnptrick_all_bulk        
    calc_loc_staples_removing_stag_phases_nnptrick_all_d3p         
    calc_loc_staples_removing_stag_phases_nnptrick_all_d3m         
   calc_loc_staples_removing_stag_phases_nnptrick_all_only_even DONE 
   calc_loc_staples_removing_stag_phases_nnptrick_all_only_odd DONE
  random_assignement:
   generate_vec3_soa_gauss WRITTEN
   // should include border communication
   generate_Momenta_gauss  WRITTEN
   // should include border communication
   generate_Conf_cold  WRITTEN
   // should include border communication
   generate_vec3_soa_z2noise WRITTEN 
   // should include border communication
  rettangoli:
   calc_loc_rectangles_2x1_removing_stag_phases_nnptrick  1DCUTWARNING - DONE
   calc_loc_rectangles_1x2_removing_stag_phases_nnptrick  1DCUTWARNING - DONE
   calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all:
    calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all (full) DONE
    calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all_bulk
    calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all_d3p
    calc_loc_improved_staples_typeA_removing_stag_phases_nnptrick_all_d3m
   calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all:
    calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all (full) DONE
    calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all_bulk
    calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all_d3p
    calc_loc_improved_staples_typeB_removing_stag_phases_nnptrick_all_d3m
   calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all:
    calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all (full) DONE
    calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all_bulk
    calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all_d3p
    calc_loc_improved_staples_typeC_removing_stag_phases_nnptrick_all_d3m
   calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all:
    calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all (full) DONE
    calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all_bulk
    calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all_d3p
    calc_loc_improved_staples_typeABC_removing_stag_phases_nnptrick_all_d3m
  stouting:
   exp_minus_QA_times_conf DONE
   compute_lambda DONE
  su3_measurements:
   calc_momenta_action   1DCUTWARNING - DONE
   calc_force_norm       1DCUTWARNING - DONE CHECK REDUCTIONS
   calc_diff_force_norm  1DCUTWARNING - DONE CHECK REDUCTIONS
   copy_ipdot_into_old   1DCUTWARNING - DONE
  su3_utilities:
   unitarize_conf        DONE
   conf_times_staples_ta_part   DONE
   RHO_times_conf_times_staples_ta_part DONE
   mom_sum_mult:
    mom_sum_mult full DONE
    mom_sum_mult_bulk
    mom_sum_mult_d3p
    mom_sum_mult_d3m
   mom_exp_times_conf_soloopenacc:
    mom_exp_times_conf_soloopenacc full DONE 
    mom_exp_times_conf_soloopenacc_bulk
    mom_exp_times_conf_soloopenacc_d3p
    mom_exp_times_conf_soloopenacc_d3m

- Kernels that must be restricted to local lattice (measurements)
  baryon number utilities:
   dM_dmu_eo(0123)    DONE
   dM_dmu_oe(0123)    DONE
   d2M_dmu2_eo(0123)    DONE
   d2M_dmu2_oe(0123)    DONE
  gauge_meas:
   reduce_loc_top_charge   DONE
   compute_local_topological_charge DONE 
  polyakov:
   polyakov_loop(0123)  DONE

                     

OTHER MODIFICATIONS
  
- NNP and NNM must give errors when they should 
  DONE : now they give -1 if the site is not included in the local+halo lattice.
  
  FOR MEASURES
  cooling:
   compute_cooled_even_links
   compute_cooled_odd_links
  

  fermion measures: 
   eo_inversion (communicate borders in two places)
   random elements generation should be ok 
    (border communication should already be done by the generating
     functions. )
    

COMMUNICATIONS
  - in fermion matrix multiplication (fermion_borders, after acc_Deo and acc_Doe)
  - in multistep_2MN_gauge (conf borders, after mom_exp_times_conf_soloopenacc) 
  - in stout_wrapper
  - in compute_sigma_from_sigma_prime_backinto_sigma_prime


REDUCTIONS:
  in su3_measurements:
  - in calc_plaquette_soloopenacc(); 
  - in calc_momenta_action(); 
  - in calc_force_norm(); 
  - in calc_diff_force_norm(); 

  in fermionic_utilities:
  - in scal_prod_global()
  - in real_scal_prod_global()
  - in l2norm2_global()



===============================================================
Possible improvements for performance

- To improve strong scaling on multishift: (+30% max scalability )
  - modify matrix multiplication, to have only one communication BUT
    TWICE AS LARGE (and more calculations).
  - kernels working only on the surface:

    |--/////BULK/////--|
   -|---////BULK////---|-
  --|----///BULK///----|--

  The gain would be that this would allow to superpose the bulk
  calculations of ALL the multishift machinery (the linear combinations on
  all the shifted vectors)  with the communications of the halos.
  Especially when the number of terms in the rational approximation is
  high, this is likely to allow better scalability (note that is is
  going to slow down performance a little bit in the case where )

- Single precision molecular dynamics: (+100% flat)
  -known advantages
  -doubling of "soa" data types 
  -brainless rewrite of the gauge part 
  -fermion part semi-brainless
  -need conversion functions

- No multishift (boh)
  -advantages not precisely known 
    (possibility of preconditioning, deflation and such)
  -functions already in place (not for multinode though).
 
